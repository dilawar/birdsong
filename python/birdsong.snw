\section{Introduction}

This literate program read bird-songs stored in a \texttt{aiff} file and extract
notes. It is written in python language and required \textbf{numpy},
textbf{scipy}, \textbf{opencv} libraries. To plot, we use \textbf{pylab} library
of python.

\section{Structure}
\label{sec:structure}

This program |birdsong| is made of modules, each specializing in one task. The
top most file is |main.py| which consists of user-interface. There is no
graphical user interface (gui) in this application. All options are passed from
command line, and parameters are stored in a config file described in section
\ref{sec:config_file}.

The entry-point of this program is described below.

<<*>>=
<<imports>>
<<helper functions>>
<<main function with control flow>>
@

<<imports>>=
import os 
import sys
import argparser

@

<<control flow>>=
def main(config):
    print("I don't know what to do with this")

if __name__ == "__main__":
    <<argument parser>>
    <<read configuration file>>
    main(config)
@

<<helper functions>>=
def configParser(file):
    try:
        import ConfigParser as cfg
    except:
        import configparser as cfg

    config = cfg.ConfigParser()
    config.read(file)
    return config

@

<<argument parser>>=
import argparse
# Argument parser.
description = '''Process bird songs'''
parser = argparse.ArgumentParser(description=description)

# Add mutually exclusive options
action = parser.add_mutually_exclusive_group(required=True)

parser.add_argument('--input_song', '-in'
        , required = True
        , help = 'Recorded song (aiff format)'
        )

action.add_argument('--extract-notes', '-e'
        , action = 'store_true'
        , help = 'Input song file in aifc format to extract notes.'
        )


action.add_argument("--process_notes", "-pn"
        , required = False
        , action = 'store_true'
        , help = "Process notes stored in this file"
        )

parser.add_argument('--note_file', '-nf'
        , required = False
        , default = 'notes.dat'
        , type = argparse.FileType('r')
        , help = 'File where notes are stored and read from'
        )

parser.add_argument('--config', '-c'
        , metavar='config file'
        , default = 'birdsongs.conf'
        , required = True
        , help = "Configuration file to fine tune the processing"
        )

class Args: pass 
args = Args()
parser.parse_args(namespace=args)

@

<<read configuration file>>=
config = configParser(args.config)
config.add_section("audio")
config.set("audio", "filepath", args.input_song)

@
